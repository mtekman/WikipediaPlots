#+TITLE: Wikipedia Plots

This is just a small little project that tries to summarise the Wikipedia articles that consist of a day of the year (e.g. [[https://en.wikipedia.org/wiki/January_12][January 12]]). Each one of these 366 articles lists years where:

1. A significant event happened (e.g. 1895, /The National Trust is founded in the United Kingdom/)
2. Someone is born (e.g. 1772, /Mikhail Speransky/, Russian academic and politician)
3. Someone dies (e.g. 1665, /Pierre de Fermat/, French mathematician and lawyer)

The following plots summarize Births/Deaths, and Events to see if there are any significant months (12) or days (31) that can claim a bias in any of the above three types. 

* Accumulate Data

Python is good for scraping data. Data is collected in a short format of day → type → years, but was then later converted into a wide format so that every observed event has it's own line. 

  #+begin_src python :session yes
    import sys
    import requests
    from lxml import html
    #import pickle
    import pandas as pd

    def makeDayStrings():
        "Literally generate days of the week as a tuple"
        dates = {
            29 : ("February",),
            30 : ("September", "April", "June", "November"),
            31 : ("January", "March", "May", "July",
                  "August", "October", "December")
        }
        order = ("January", "February", "March", "April",
                 "May", "June", "July", "August", "September",
                 "October", "November", "December")

        days = []
        for month in order:
            getday = [day for day in dates if month in dates[day]][0]
            for d in range(getday):
                days.append("%s_%d" % (month, (d+1)))
        return(tuple(days))


    def handleADBC(temp):
        if temp.startswith("AD "):
            temp = temp.split("AD ")[1]
        elif temp.endswith(" AD"):
            temp = temp.split(" AD")[0]
        elif temp.endswith(" BC") or temp.endswith(" BCE"):
            temp = "-" + temp.split(" BC")[0]
        elif temp.startswith("BC ") or temp.startswith(" BCE"):
            temp = "-" + temp.split()[1]
        return(temp)


    def getEventsDay(day):
        "Take January_11 and extract the Events, Births, Deaths years"
        page = requests.get("https://en.wikipedia.org/wiki/" + day)
        groups = str(page.content).split("mw-headline")[1:]

        last_valid_headline = None
        headlines = {}

        for group in groups:
            # We assume events, birthdays, holidays in that order
            headline = group.split("\">")[0].split("id=\"")[1]
            data = group.split("<li>")

            if len(data) > 1:
                data = data[1:]

            if headline in ("Events", "Births", "Deaths"):
                last_valid_headline = headline

            # Skip beginning and End
            if last_valid_headline is None:continue
            if headline in ("Holidays and observances", "References"):break

            if last_valid_headline not in headlines:
                headlines[last_valid_headline] = []

            #pdb.set_trace()
            for li in data:
                year = None
                temp = li.split("</a>")[0].strip()

                if len(temp) < 5:continue
                # Clause where a hidden 0 exists...
                # - e.g May_21
                if "color:transparent;" in temp:
                    temp = temp.split('>')[-1]
                    year = int(handleADBC(temp))

                elif temp.startswith("<a href=") or temp.split()[1] == "<a":
                    #<a href="/wiki/.."
                    temp = temp.split(">")[1]
                    # AD and BC handlers
                    temp = handleADBC(temp)

                    ptw = temp.split()
                    if len(ptw)>1:
                        #print(ptw)
                        continue
                    try:
                        year = int(temp)
                    except ValueError:
                        #print(temp)
                        continue
                else:
                    try:
                        year = int(temp.split()[0])
                    except ValueError:
                        #print("CCY", temp)
                        continue

                headlines[last_valid_headline].append(year)
        return(headlines)


    def daysToYearsMap(start=0):
        days = makeDayStrings()[start:]
        daymap = {}
        for day in days:
            events = getEventsDay(day)
            print("%20s %4d %4d %4d" % (
                day,
                len(events["Events"]),
                len(events["Births"]),
                len(events["Deaths"])
            ))
            daymap[day] = events
        return(daymap)

    dog = daysToYearsMap()

    # Create Pandas Dataframe and save to csv
    # format for use in R
    tab = df.from_dict(dog).T
    tab.to_csv("daysToYearsMap.csv")


    # To super wide format
    newdf = pd.DataFrame(columns=["Year","Date", "Type"])
    for day in dog:
        print(day, end=" : ")
        for typer in ("Events","Births","Deaths"):
            print(typer, end=" ")
            hein = dog[day][typer]
            for year in hein:
                newdf = newdf.append({"Year":year,"Date":day,"Type":typer},
                                     ignore_index=True)
        print("")


    newdf.to_csv("daysToYearsMap_superwide2.csv")
  #+end_src


* Print the CSV using GGplot in R

R is great for plotting and sorting, so we will use that. None of the dplyr stuff, otherwise I might as well just use a shell.

** Initial attempt using compact format

Trying to plot a boxplot when the data is structured from tab["January_1"]["Events"] = Array[years] is a pain in the butt. I tried reshaping/recasting it to a long format within R, but that was an exercise in futility.

   #+begin_src R
     library(ggplot2)
     library(data.table)
     require(reshape2)

     ## Reformat CSV to Data.Frame
     tab <- read.csv("daysToYearsMap.csv", row.names=1,
                     stringsAsFactors = F, sep = ",")


     nested2intlist <- function(element){
       "Convert string to integer array of years"
       trimmed <- substr(element, 2, nchar(element)-1)
       strarr <- strsplit(trimmed, split=", ")[[1]]
       return(as.numeric(strarr))
     }

     cod <- data.table(apply(tab, 1:2, nested2intlist),
       keep.rownames = T, check.names = T)

     cod$date <- cod$rn
     cod$month <- as.factor(sub("(.*)_\\d*", "\\1", cod$date))
     cod$day <- as.factor(as.integer(sub(".*_(\\d*)", "\\1", cod$date)))
     cod$rn <- NULL

     m <- melt(cod, id.vars = c("Events"))

     ## ggplot
     events.by.month <- cod$Events




     ggplot(data = cod, aes(x=month, y=Events)) + geom_boxplot()


     ggplot(cod) + geom_boxplot(aes(y=hist(cod$Events)))

     ggplot(cod, aes(x=month, group=month)) + geom_boxplot(aes(y=Events))
   #+end_src

I abandoned this approach and redid the python part above to give a super wide format so that each year is an observation and that variables are Year, Date, isEvent, isBirth, isDeath.

** Second attempt using wide format
   
*** Initialise and Filter Datasets

   #+begin_src R :session yes
     library(ggplot2)
     library(gridExtra)
     library(lattice)
     library(grid)
     library(gtable)

     ## Reformat CSV to Data.Frame
     tab <- read.csv("daysToYearsMap_superwide2.csv",
                     row.names=1,
                     stringsAsFactors = F, sep = ",")

     tab$Month <- factor(sub("(^...).*_\\d*", "\\1", tab$Date), # sub("(.*)_\\d*", "\\1", tab$Date),
                         levels=c("Jan", "Feb", "Mar", "Apr", "May",
                                  "Jun", "Jul", "Aug", "Sep", "Oct",
                                  "Nov", "Dec"))
     tab$Day <- factor(as.integer(sub(".*_(\\d*)", "\\1", tab$Date)),
                       levels=seq(1,31))

     #### Sub Datasets ####
     sub.all <- tab
     sub.all.t100v100 <- tab[tab$Year < 100 & tab$Year > -100,]
     sub.all.am100 <- tab[tab$Year > -100,]
     sub.all.a1900 <- tab[tab$Year > 1900,]
     sub.all.a2000 <- tab[tab$Year > 2000,]
     sub.all.b1000 <- tab[tab$Year < 1000,]
     sub.all.b0 <- tab[tab$Year < 0,]
     #
     sub.bd <- tab[tab$Type %in% c("Births","Deaths"),]
     sub.bd.t100v100 <- sub.bd[sub.bd$Year < 100 & sub.bd$Year > -100,]
     sub.bd.a1900 <- sub.bd[sub.bd$Year > 1900,]
     sub.bd.a2000 <- sub.bd[sub.bd$Year > 2000,]
     sub.bd.b1000 <- sub.bd[sub.bd$Year < 1000,]
     sub.bd.b0 <- sub.bd[sub.bd$Year < 0,]
     #
     sub.ev <- tab[tab$Type=="Events",]
     sub.ev.t100v100 <- sub.ev[sub.ev$Year < 100 & sub.ev$Year > -100,]
     sub.ev.a1900 <- sub.ev[sub.ev$Year > 1900,]
     sub.ev.a2000 <- sub.ev[sub.ev$Year > 2000,]
     sub.ev.b1000 <- sub.ev[sub.ev$Year < 1000,]
     sub.ev.b0 <- sub.ev[sub.ev$Year < 0,]

   #+end_src

*** Plotting Helper Functions

   #+begin_src R :session yes
     addNumbers <- function(plt, type="All", offset = -100, jump = 150, size = 4){
       pl1 <- plt
       tab <- plt$data
       if (type %in% c("All","Ev")){
         pl1 <- pl1 + geom_label(
                        data=tab[tab$Type=="Events",],
                        aes(label=..count.., color=Type),
                        stat='count', y=min(tab$Year)+offset,
                        size = size)
       }
       if (type %in% c("All","BD")){
         if (type=="All"){ offset = offset + jump }
         pl1 <- pl1 + geom_label(
                        data=tab[tab$Type=="Deaths",],
                        aes(label=..count.., color=Type),
                        stat='count', y=min(tab$Year)+offset,
                        size = size)
         offset = offset + jump
         pl1 <- pl1 + geom_label(
                        data=tab[tab$Type=="Births",],
                        aes(label=..count.., color=Type),
                        stat='count', y=min(tab$Year)+offset,
                        size = size)
       }
       return(pl1)
     }

     violin <- function(plt, scale="count", toplot=c(1,1)){
       pl1 <- plt
       if (toplot[[1]] == 1){
         pl1 <- pl1 + geom_violin(scale=scale)
       }
       if (toplot[[2]] == 1){
         pl1 <- pl1 + geom_violin(scale=scale, aes(color=Type))
       }
       return(pl1)
     }

     plotit <- function(dat, plot.type){
       tmp <- NULL
       switch(plot.type,
              Month = { tmp <- ggplot(dat, aes(x=Month, y=Year)) },
              Day = { tmp <- ggplot(dat, aes(x=Day, y=Year)) },
              Date = { tmp <- ggplot(dat, aes(x=Date, y=Year)) },
              stop("wrong type"))
       return(tmp)
     }
  #+end_src

*** Individual Plots
**** Months

   #+begin_src R
     ##### Months #####
     ## 1. All
     ##    - Feb, Jan, Oct seem to have a few dates nearer to 0 AD
     violin(addNumbers(plotit(sub.all, "Month"))) +
       ggtitle("Months with Significant Years") +
       scale_y_continuous(breaks = c(seq(-4000,0,1000),
                                     seq(-100,100,100),
                                     seq(1800, 2020, by = 100)))

     # Births/Deaths ::: Jan, Feb, Oct
     violin(addNumbers(plotit(sub.bd, "Month"), type = "BD",
                       offset = -100, jump = 100)) +
       ggtitle("Months with Significant Years (Births, Deaths)") +
       scale_y_continuous(breaks = c(seq(-50,50,50),
                                     seq(1800, 2020, by = 100)))

     # Events -- not interesting
     violin(addNumbers(plotit(sub.ev, "Month"), type = "Ev",
                       offset = -100, jump = 100)) +
       ggtitle("Months with Significant Years (Events)") +
       scale_y_continuous(breaks = c(seq(-50,50,50), seq(1800, 2020, by = 100)))

     ## Births much less than deaths, duh.
     addNumbers(plotit(sub.bd.a1900, "Month"), type="BD", offset=10, jump=15) +
       geom_boxplot(aes(color=Type)) +
       ggtitle("Months with Significant Years > 1900 AD (Births, Deaths)")

     ## Events 1900 - 2025 -- No real difference
     addNumbers(plotit(sub.ev.a1900, "Month"), type="Ev", offset=0) +
       geom_boxplot(aes(color=Type)) +
       ggtitle("Months with Significant Years > 1900 AD (Events)")

     # Events 2000 - 2025, really no significance in months
     addNumbers(plotit(sub.ev.a2000, "Month"), type="Ev", offset=0) +
       geom_boxplot(aes(color=Type)) +
       ggtitle("Months with Significant Years > 2000 AD (Events)") +
       scale_y_continuous(breaks = seq(2000, 2020, by = 5))

     ## Births/Deaths > 2000, really no significance in months
     ## - 2012 seems to be a huge death year, and september 2002 seemed good
     addNumbers(plotit(sub.bd.a2000, "Month") +
                geom_boxplot(aes(color=Type)),
                type="BD", offset = 1, jump = 14) +
       ggtitle("Months with Significant Years > 2000 AD (Births, Deaths)") +
       scale_y_continuous(breaks = seq(2000, 2020, by = 2))

     # Births/Deaths 1000 BC to 1000 AD
     addNumbers(plotit(sub.bd.t100v100, "Month") +
                geom_boxplot(aes(color=Type)),
                type="BD", offset = 1, jump = 15) +
       ggtitle("1000 BC < Months with Significant Years < 1000 AD (Births, Deaths)") +
       scale_y_continuous(breaks = seq(-100, 100, by = 20))


     addNumbers(violin(plotit(sub.ev.t100v100, "Month"), toplot = c(0,1)),
                type="Ev", offset = 1, jump = 14) +
       ggtitle("1000 BC < Months with Significant Years < 1000 AD (Events)") +
       scale_y_continuous(breaks = seq(-100, 100, by = 20))

     # Feb is down, August and December up.
     addNumbers(violin(plotit(sub.all.b0, "Month")),
                offset = 0, jump = 250) +
       ggtitle("Months with Significant Years (BC)") +
       scale_y_continuous(breaks = seq(-4000, 0, by = 200))
   #+end_src

**** Days

   #+begin_src R
     ### Days
     ## 1 - Most dates between 1700-2000, with a few blips between -100 to 100 in days 5,12,22. Days 3,7,11 seem to have most outliers.
     addNumbers(violin(plotit(sub.all, "Day")),
                jump = 300, size = 3) +
       ggtitle("Days with Significant Years") +
       scale_y_continuous(breaks = c(seq(-100, 100, by = 100),
                                     seq(1700,2000, by=100)))

     ## 2 - Zoomed version of 1
     addNumbers(violin(plotit(sub.all.am100, "Day")),
                offset = 1000, size = 3) +
       ggtitle("Days with Significant Years ( > 100 BC )") +
       scale_y_continuous(breaks = c(seq(-100, 100, by = 100),
                                     seq(1700,2000, by=100)))

     addNumbers(violin(plotit(sub.all.t100v100, "Day"), toplot = c(1,1)),
                offset = 0, jump = 10, size=3) +
       ggtitle("Days with Significant Years ( 100 BC - 100 AD )") +
       scale_y_continuous(breaks = seq(-100, 100, by = 20))

     addNumbers(violin(plotit(sub.bd.t100v100, "Day"), toplot = c(1,1)),
                offset = 0, jump = 10, size=3) +
       ggtitle("Days with Significant Years ( 100 BC - 100 AD ) (Births,Deaths)") +
       scale_y_continuous(breaks = seq(-100, 100, by = 20))

     # More births than deaths overall
     addNumbers(violin(plotit(sub.bd, "Day"), toplot = c(1,1)),
                offset = -100, jump = 150, size=3) +
       ggtitle("Days with Significant Years (Births,Deaths)")

     ## More births than deaths overall, post 1900, but no day sticks
     ## out more than any other.
     addNumbers(plotit(sub.bd.a1900, "Day") + geom_boxplot(aes(color=Type)),
                offset = -1, jump=7, size=3) +
       ggtitle("Days with Significant Years > 1900 (Births,Deaths)")

   #+end_src

*** Combined Plots
**** Helper Functions

   #+begin_src R
     fancyplot <- function(data, type, title, breakers, plot.type="geom_boxplot",
                           scale=0.05, color=color, yoff=0){
       plotit(data, type) +
         ggtitle(title) +
         get(plot.type)(fill=color, color="grey", notch=F) +
             geom_bar(data=data, stat='count',
                      aes(x=get(type),y=..count..*scale),
                      position = position_nudge(y=yoff+min(data$Year))) +
             coord_cartesian(
               ylim = c(yoff+min(data$Year)+5, # + 5 for the bottom margin
                        max(data$Year))) +
             scale_y_continuous(
               name = NULL, #"Years with Events Observed",
               position="right",
               sec.axis = sec_axis(~(.-(yoff+min(data$Year)))/scale,
                                   breaks = breakers,
                                   name=NULL #"Number of Events"
                                   )
             ) +
             theme(axis.title.y.left = element_text(hjust=0.05))
     }

     commonfancyplot <- function(dataset, title, breaks, scale, ptype = "geom_boxplot", yoff=0){
       f1 <- fancyplot(dataset, "Month", NULL,
                       breaks, plot.type = ptype, scale=scale, color="darkgreen", yoff=yoff)
       f2 <- fancyplot(dataset, "Day", NULL,
                       breaks, plot.type = ptype, scale=scale, color="darkred", yoff=yoff)
       f3 <- fancyplot(dataset, "Month", NULL,
                       breaks, plot.type = ptype, scale=scale, color="darkgreen", yoff=yoff)
       f4 <- fancyplot(dataset, "Day", NULL,
                       breaks, plot.type = ptype, scale=scale, color="darkred", yoff=yoff)

       pp1 <- f1 + theme(axis.title.y.right = element_blank(), axis.text.y.right = element_blank(),
                         axis.title.x = element_blank(), axis.text.x = element_blank())
       pp2 <- f2 + theme(axis.title.y.left = element_blank(), axis.text.y.left = element_blank(),
                         axis.title.x = element_blank(), axis.text.x = element_blank())
       pp3 <- f3 + theme(axis.title.y.right = element_blank(), axis.text.y.right = element_blank())
       pp4 <- f4 + theme(axis.title.y.left = element_blank(), axis.text.y.left = element_blank())

       legend = gtable_filter(ggplotGrob(pp1), "guide-box")

       grid.arrange(
         arrangeGrob(pp1, pp2, pp3, pp4, ncol=2,
                     top = textGrob(title, vjust = 1,
                                    gp = gpar(fontface = "bold", cex = 1.5)),
                     left = textGrob("Number of Observed Events", rot = 90, vjust = 1),
                     right = textGrob("Years of Observed Events", rot = -90, vjust = 1)),
         legend,
         widths=c(8,1), nrow=1)
     }
  #+end_src

**** Plots

   #+begin_src R :session yes
     commonfancyplot(sub.all, "Significant Years: All",
                     seq(0,10000,5000), 0.08, ptype = "geom_violin", yoff=0)

     commonfancyplot(sub.all.am100, "Significant Years (100 BC - Now): All",
                     seq(0,10000,5000), 0.04, ptype = "geom_violin", yoff=-500)

     commonfancyplot(sub.ev.a1900, "Significant Years (1900 - Now): Events",
                     seq(0,1000,200), 0.025, yoff=-30)

     commonfancyplot(sub.bd.a1900, "Significant Years (1900 - Now): Births, Deaths",
                     seq(0,8000,2000), 0.003, yoff=-30)

     commonfancyplot(sub.ev.t100v100, "Significant Years (100 BC - 100 AD): Events",
                     seq(0,15,5), 2, ptype = "geom_violin", yoff=-30)

     commonfancyplot(sub.bd.t100v100, "Significant Years (100 BC - 100 AD): Births, Deaths",
                     seq(0,400,100), 0.1, ptype = "geom_violin", yoff=-30)

     commonfancyplot(sub.ev.b0, "Significant Years (Before 0 AD): Events",
                     seq(0,15,5), 70, yoff=500)

     commonfancyplot(sub.bd.b0, "Significant Years (Before 0 AD): Births, Deaths",
                     seq(0,10,5), 20, yoff=-50)

   #+end_src

** Better Combined Plots

*** Initialise and Filter Datasets

   #+begin_src R :session yes
     library(ggplot2)
     library(gridExtra)
     library(lattice)
     library(grid)
     library(gtable)

     ## Reformat CSV to Data.Frame
     tab <- read.csv("daysToYearsMap_superwide2.csv",
                     row.names=1,
                     stringsAsFactors = F, sep = ",")

     tab$Month <- factor(sub("(^...).*_\\d*", "\\1", tab$Date), # sub("(.*)_\\d*", "\\1", tab$Date),
                         levels=c("Jan", "Feb", "Mar", "Apr", "May",
                                  "Jun", "Jul", "Aug", "Sep", "Oct",
                                  "Nov", "Dec"))
     tab$Day <- factor(as.integer(sub(".*_(\\d*)", "\\1", tab$Date)),
                       levels=seq(1,31))

     #### Sub Datasets ####
     sub.all <- tab
     sub.all.t100v100 <- tab[tab$Year < 100 & tab$Year > -100,]
     sub.all.am100 <- tab[tab$Year > -100,]
     sub.all.a1900 <- tab[tab$Year > 1900,]
     sub.all.a2000 <- tab[tab$Year > 2000,]
     sub.all.b1000 <- tab[tab$Year < 1000,]
     sub.all.b0 <- tab[tab$Year < 0,]
     #
     sub.bd <- tab[tab$Type %in% c("Births","Deaths"),]
     sub.bd.t100v100 <- sub.bd[sub.bd$Year < 100 & sub.bd$Year > -100,]
     sub.bd.a1900 <- sub.bd[sub.bd$Year > 1900,]
     sub.bd.a2000 <- sub.bd[sub.bd$Year > 2000,]
     sub.bd.b1000 <- sub.bd[sub.bd$Year < 1000,]
     sub.bd.b0 <- sub.bd[sub.bd$Year < 0,]
     #
     sub.ev <- tab[tab$Type=="Events",]
     sub.ev.t100v100 <- sub.ev[sub.ev$Year < 100 & sub.ev$Year > -100,]
     sub.ev.a1900 <- sub.ev[sub.ev$Year > 1900,]
     sub.ev.a2000 <- sub.ev[sub.ev$Year > 2000,]
     sub.ev.b1000 <- sub.ev[sub.ev$Year < 1000,]
     sub.ev.b0 <- sub.ev[sub.ev$Year < 0,]

     dim(sub.ev)

   #+end_src

   #+RESULTS:
   | 17676 |
   |     5 |

*** Plot

   #+begin_src R :session yes
     plotit <- function(dat, plot.type){
       tmp <- NULL
       switch(plot.type,
              Month = { tmp <- ggplot(dat, aes(x=Month, y=Year)) },
              Day = { tmp <- ggplot(dat, aes(x=Day, y=Year)) },
              Date = { tmp <- ggplot(dat, aes(x=Date, y=Year)) },
              stop("wrong type"))
       return(tmp)
     }

     eventplot <- function (data, type, color, breaks.left, breaks.right, scale, yoff){
       plotit(data, type) +
         geom_violin(fill="white", color="grey") +
         geom_bar(data=data, stat='count',
                  aes(x=get(type), y=..count..*scale), fill=color,
                  position = position_nudge(y=yoff+min(data$Year))) +
         geom_boxplot(fill=color, notch=F, color="black", width=0.3,
                      outlier.colour = NULL, outlier.size = 0.1) +
         coord_cartesian(ylim = c(yoff+min(data$Year)+5, max(data$Year))) +
         scale_y_continuous(name = NULL, position="right", breaks = breaks.right,
                            sec.axis = sec_axis(~(.-(yoff+min(data$Year)))/scale,
                                                breaks = breaks.left, name=NULL)) +
         theme(axis.title.y.left = element_text(hjust=0.05))
     }

     birthdeathplot <- function(data, type, color, breaks.left, breaks.right, scale, yoff){
       prt <- plotit(data, type) + geom_violin(fill="white", color="grey")

       iscolor <- !is.na(color)
       ismulti <- length(unique(data$Type))

       if (iscolor && ismulti){
         prt <- prt +
           geom_bar(data=data, stat='count',
                    aes(x=get(type), y=..count..*scale, fill=Type),
                    position = position_nudge(y=yoff+min(data$Year))) +
           ## Here we have a day plot, which could have multi types, but we want
           ## to keep it all grouped together
           geom_boxplot(fill=color,
                        notch=F, color="black", width=0.3,
                        outlier.colour = NULL, outlier.size = 0.1)
       } else if (iscolor && !ismulti){
         prt <- prt +
           geom_bar(data=data, stat='count',
                    aes(x=get(type), y=..count..*scale), fill=color,
                    position = position_nudge(y=yoff+min(data$Year))) +
           geom_boxplot(fill=color,
                        notch=F, color="black", width=0.3,
                        outlier.colour = NULL, outlier.size = 0.1)
       } else if (!iscolor && ismulti){
         prt <- prt +
           geom_bar(data=data, stat='count',
                    aes(x=get(type), y=..count..*scale, fill=Type),
                    position = position_nudge(y=yoff+min(data$Year))) +
           geom_boxplot(aes(fill=Type),
                        notch=F, color="black", width=0.3,
                        outlier.colour = NULL, outlier.size = 0.1)
       } else {
         stop("Need to give either a colour or provide multi type dataset")
       }

       prt + coord_cartesian(ylim = c(yoff+min(data$Year)+5, max(data$Year))) +
         scale_y_continuous(name = NULL, position="right", breaks = breaks.right,
                            sec.axis = sec_axis(~(.-(yoff+min(data$Year)))/scale,
                                                breaks = breaks.left, name=NULL)) +
         theme(axis.title.y.left = element_text(hjust=0.05))
     }

     summaryplot <- function(title, data.bd, data.ev, breaks.left, breaks.right, scales, yoffs)
     {
       month.bd <- birthdeathplot(data.bd, "Month", NA, breaks.left[[1]], breaks.right[[1]], scales[[1]], yoffs[[1]]) +
         theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_blank(), axis.text.y.right = element_blank())
       days.bd <- birthdeathplot(data.bd, "Day", "purple", breaks.left[[3]], breaks.right[[3]], scales[[3]], yoffs[[3]]) +
         theme(legend.position="none", axis.title.x = element_blank(), axis.text.x = element_blank())
       month.ev <- eventplot(data.ev, "Month", "yellow", breaks.left[[2]], breaks.right[[2]], scales[[2]], yoffs[[2]]) +
         theme(legend.position="none", axis.text.y.right = element_blank())
       days.ev <- eventplot(data.ev, "Day", "yellow", breaks.left[[4]], breaks.right[[4]], scales[[4]], yoffs[[4]]) +
         theme(legend.position="none")

       tab <- arrangeGrob(month.bd, days.bd, month.ev, days.ev, ncol=2,
                          top = textGrob(title, vjust = 1, gp = gpar(fontface = "bold", cex = 2)),
                          left = textGrob("Number of Significant Events", rot = 90, vjust = 1,
                                          gp = gpar(fontsize = 20)),
                          right = textGrob("Significant Years", rot = -90, vjust = 1,
                                           gp = gpar(fontsize = 20)))
       plot(tab)
     }

     png("sig.all.png", width=1000, height=1000)
     summaryplot("Significant Years by Month and Day", sub.bd, sub.ev,
       breaks.left = list(seq(0,8000,2000), seq(0,1500,500), seq(0,3000,1000), seq(0,800,200)),
       breaks.right = list(seq(-4000,2000,500), seq(-4000,2000,1000), seq(-4000,2000,500), seq(-4000,2000,1000)),
       scales = c(0.1, 1.5, 0.3, 3),
       yoffs = c(-200, -200, -200, -200))
     dev.off()

     png("sig.b0.png", width=1000, height=1000)
     summaryplot("Significant Years by Month and Day (Before 0 AD)", sub.bd.b0, sub.ev.b0,
       breaks.left = list(seq(0,10,2), seq(0,15,5), seq(0,5,1), seq(0,8,2)),
       breaks.right = list(seq(-4000,0,100), seq(-4000,0,500), seq(-4000,0,100), seq(-4000,0,500)),
       scales = c(20, 80, 50, 180),
       yoffs = c(-50, -100, -50, -100))
     dev.off()

     png("sig.100m100.png", width=1000, height=1000)
     summaryplot("Significant Years by Month and Day (100 BC - 100 AD)", sub.bd.t100v100, sub.ev.t100v100,
       breaks.left = list(seq(0,350,50), seq(0,15,5), seq(0,350,50), seq(0,8,2)),
       breaks.right = list(seq(-100,100,20), seq(-100,100,20), seq(-100,100,20), seq(-100,100,20)),
       scales = c(0.35, 8, 0.35, 16),
       yoffs = c(-50, -100, -50, -100))
     dev.off()

     png("sig.1900mnow.png", width=1000, height=1000)
     summaryplot("Significant Years by Month and Day (1900 - Now)", sub.bd.a1900, sub.ev.a1900,
       breaks.left = list(seq(0,6000,2000), seq(0,1000,200), seq(0,2500,500), seq(0,500,100)),
       breaks.right = list(seq(1890,2020,20), seq(1890,2020,20), seq(1890,2020,20), seq(1890,2020,20)),
       scales = c(0.008, 0.075, 0.03, 0.15),
       yoffs = c(-40, -60, -40, -60))
     dev.off()
   #+end_src
